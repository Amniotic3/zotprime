dataserver:
  ports:
  - name: dataserver-api
    port: 8080
    targetPort: 80
  - name: s3
    port: 8082
    targetPort: 8082
  type: ClusterIP
dbConfig:
  mariadbDatabasename: zoterotest
  mariadbUser: zotero
dbSecret:
  secretTxt: ""
elasticsearch:
  ports:
  - name: elasticsearch
    port: 9300
    targetPort: 0
  type: ClusterIP
kubernetesClusterDomain: cluster.local
localstack:
  ports:
  - name: localstack-sns
    port: 4575
    targetPort: sns-4575
  - name: localstack-sqs
    port: 4576
    targetPort: sqs-4576
  - name: localstack-apigateway
    port: 4567
    targetPort: apigateway-4567
  type: ClusterIP
memcached:
  ports:
  - name: memcached
    port: 11211
    targetPort: 11211
  type: ClusterIP
minio:
  ports:
  - name: minio-ui
    port: 80
    targetPort: 9001
  - name: minio-data
    port: 9000
    targetPort: 9000
  type: ClusterIP
minioConfig:
  minioUser: zotero
minioSecret:
  secretTxt: ""
mysql:
  ports:
  - name: mariadb
    port: 3306
    targetPort: 3306
  type: ClusterIP
phpmyadmin:
  ports:
  - name: phpmyadmin
    port: 80
    targetPort: 80
  type: ClusterIP
redis:
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
  type: ClusterIP
redisConfig:
  redisConf: |-
    cluster-enabled no
    appendonly yes
    protected-mode no
    dir /data
    port 6379
redisProbes:
  livenessSh: |-
    #!/bin/sh
    pingResponse="$(redis-cli -h localhost ping | head -n1 | awk '{print $1;}')"
    if [ "$?" -eq "124" ]; then
      echo "PING timed out"
      exit 1
    fi
    if [ "$pingResponse" != "PONG"] && [ "$pingResponse" != "LOADING" ] && [ "$pingResponse" != "MASTERDOWN" ]; then
      echo "$pingResponse"
      exit 1
    fi
  readinessSh: |-
    #!/bin/sh
    pingResponse="$(redis-cli -h localhost ping)"
    if [ "$?" -eq "124" ]; then
      echo "PING timed out"
      exit 1
    fi
    if [ "$pingResponse" != "PONG"]; then
      echo "$pingResponse"
      exit 1
    fi
streamserver:
  ports:
  - name: streamserver
    port: 8081
    targetPort: 81
  type: ClusterIP
streamserverConfig:
  defaultJs: "var os = require(\"os\");\n// Default config\nvar config = {\n\tdev:
    false,\n\tlogLevel: 'info',\n\thostname: os.hostname().split('.')[0],\n\thttpPort:
    81,\n\tproxyProtocol: false,\n\thttps: false,\n\ttrustedProxies: [],\n\tstatusInterval:
    10,\n\tkeepaliveInterval: 25,\n\tretryTime: 10,\n\tshutdownDelay: 100,\n\tredis:
    {\n\t\thost: 'redis',\n\t\tprefix: ''\n\t},\n\tapiURL: 'http://dataserver/',\n\tapiVersion:
    3,\n\tapiRequestHeaders: {},\n\tlongStackTraces: false,\n\tglobalTopics: [\n\t\t'styles',\n\t\t'translators'\n\t],\n\t//
    Minimum delay before clients should act on global topic notifications -- since
    these are triggered\n\t// by webhooks or other queued notifications, they need
    time to be processed elsewhere\n\tglobalTopicsMinDelay: 30 * 1000,\n\t// Notification
    action period -- clients are given a randomly chosen delay within this time\n\t//
    period before they should act upon the notification, so that we don't DDoS ourselves\n\tglobalTopicsDelayPeriod:
    60 * 1000,\n\tcontinuedDelayDefault: 3 * 1000,\n\tcontinuedDelay: 30 * 1000,\n\tstatsD:
    {\n\t\thost: ''\n\t}\n};\nmodule.exports = config;"
tinymceclean:
  ports:
  - name: tinymceclean
    port: 16342
    targetPort: 16342
  type: ClusterIP
zotprimeDataserver:
  replicas: 1
  zotprimeDataserver:
    image:
      repository: localhost:32000/zotprime-k8s/zotprime-dataserver
      tag: latest
    imagePullPolicy: Always
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
zotprimeDataserverLb:
  ports:
  - name: data
    port: 8080
    protocol: TCP
    targetPort: 80
  type: LoadBalancer
zotprimeDb:
  mariadb:
    args:
    - set -o allexport && source tmp/_key/secret.txt && set +o allexport && /usr/local/bin/docker-entrypoint.sh
      mysqld
    containerSecurityContext:
      runAsGroup: 999
      runAsUser: 999
    image:
      repository: localhost:32000/zotprime-db
      tag: dev
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
  replicas: 1
  volumeClaims:
    datadir:
      requests:
        storage: 300M
zotprimeElasticsearch:
  elasticsearch:
    env:
      clusterName: zotero
      clusterRoutingAllocationDiskThresholdEnabled: "false"
      discoveryType: single-node
      xpackSecurityEnabled: "true"
    image:
      repository: localhost:32000/elasticsearch
      tag: 8.7.0
    resources:
      limits:
        cpu: 500m
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 512M
  initSysctl:
    containerSecurityContext:
      privileged: true
    image:
      repository: busybox
      tag: 1.27.2
  replicas: 1
  volumeClaims:
    storage:
      requests:
        storage: 2Gi
zotprimeLocalstack:
  localstack:
    containerSecurityContext: {}
    env:
      debug: "0"
      localstackK8SServiceName: localstack
      services: sns,sqs,apigateway
    image:
      repository: localhost:32000/localstack
      tag: latest
    imagePullPolicy: IfNotPresent
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
  replicas: 1
zotprimeMemcached:
  memcached:
    args:
    - -m 2047
    - -I 50M
    image:
      repository: memcached
      tag: "1.5"
    resources:
      limits:
        cpu: 200m
        memory: 2000Mi
      requests:
        cpu: 100m
        memory: 1000Mi
  replicas: 1
zotprimeMinio:
  nodeSelector:
    kubernetes.io/hostname: localhost.localdomain
  replicas: 1
  zotprimeMinio:
    args:
    - set -o allexport && source tmp/_key/secret.txt && set +o allexport && minio
      server /data --console-address :9001
    image:
      repository: quay.io/minio/minio
      tag: latest
    imagePullPolicy: Always
    resources:
      limits:
        cpu: "1"
        memory: 512Mi
  zotprimeMiniomc:
    image:
      repository: localhost
      tag: 32000/zotprime-k8s/zotprime-miniomc
    resources:
      limits:
        cpu: 300m
        memory: 256Mi
zotprimePhpmyadmin:
  phpmyadmin:
    env:
      pmaHost: mysql
      pmaPort: "3306"
    image:
      repository: localhost:32000/zotprime-phpmyadmin
      tag: dev
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
zotprimeRedis:
  redis:
    args:
    - /conf/redis.conf
    - --protected-mode
    - "no"
    image:
      repository: redis
      tag: "5.0"
    resources:
      requests:
        cpu: 100m
        memory: 100Mi
  replicas: 1
  volumeClaims:
    data:
      requests:
        storage: 1Gi
zotprimeStreamserver:
  replicas: 1
  zotprimeStreamserver:
    image:
      repository: localhost:32000/zotprime-k8s/zotprime-streamserver
      tag: latest
    imagePullPolicy: Always
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
zotprimeStreamserverLb:
  ports:
  - name: stream
    port: 8081
    protocol: TCP
    targetPort: 81
  type: LoadBalancer
zotprimeTinymceclean:
  replicas: 1
  zotprimeTinymceclean:
    image:
      repository: localhost:32000/zotprime-k8s/zotprime-tinymceclean
      tag: latest
    imagePullPolicy: Always
    resources:
      limits:
        cpu: 100m
        memory: 256Mi
